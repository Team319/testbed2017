// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.testbed2017;

import edu.wpi.first.wpilibj.CameraServer;

//import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc319.testbed2017.commands.*;
import org.usfirst.frc319.testbed2017.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static testbed testbed;
    public static driveTrain drivetrain;

    //this is for camera
    public static CameraServer server;
    //
    
  
    
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        testbed = new testbed();
        drivetrain = new driveTrain();
        
        //this...
      //  server = CameraServer.getInstance();
        //server.setSize(CameraServer.kSize640x480);
        //server.startAutomaticCapture();
        
        //...to this is camera-Joshua 1/14/17
        
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Default", new AutonomousCommand());
        autoChooser.addObject("HI This is a test...", new AutonomousCommand2());
        SmartDashboard.putData("Autonoumous Mode Chooser", autoChooser); 
        
        Robot.drivetrain.shiftDown();
        
        oi = new OI();

        

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        SmartDashboard.putInt("Right Encoder", Robot.drivetrain.getRightDrivetrainEncoder());
        
        SmartDashboard.putInt("Left Encoder", Robot.drivetrain.getLeftDrivetrainEncoder());
        
        SmartDashboard.putInt("Shooter Velocity", Robot.testbed.getShooterEncVelocity());
        
        SmartDashboard.putInt("Elevator Velocity", Robot.testbed.getElevatorEncVelocity());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
