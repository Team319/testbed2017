// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.testbed2017.subsystems;

import org.usfirst.frc319.testbed2017.RobotMap;
import org.usfirst.frc319.testbed2017.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class testbed extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private final CANTalon talon0 = RobotMap.testbedtalon0;
    private final CANTalon talon1 = RobotMap.testbedtalon1;
    private final CANTalon talon2 = RobotMap.testbedtalon2;
    private final CANTalon talon7 = RobotMap.testbedtalon7;
    private final CANTalon talon8 = RobotMap.testbedtalon8;
    private final CANTalon talon9 = RobotMap.testbedtalon9;
    private final Compressor compressor = RobotMap.compressor;

    //public testbed-before default
    // setup lead follow and all of lines38-60

    public testbed(){
    	//----------------speedmode for shooter----------//
    	 
   	     talon8.changeControlMode(TalonControlMode.Speed); //done
         talon8.enableBrakeMode(false);//done
         talon9.enableBrakeMode(false);//done
          
    	 talon8.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative); //done
    	 talon8.reverseOutput(false);//done
         talon8.reverseSensor(true);//done
         
         talon9.changeControlMode(TalonControlMode.Follower); //done
         talon9.set(talon8.getDeviceID()); //done
         talon9.reverseOutput(true);//done
         
         talon8.configNominalOutputVoltage(+0.0f, -0.0f);//all three done
         talon8.configPeakOutputVoltage(+12.0f, -12.0f);//one of these should be 0,+12
         talon9.configPeakOutputVoltage(+12.0f, -12.0f);//the other 0,-12 but lets do that later
         
         talon8.setProfile(0);//all down done
         talon8.setF(0.02939);
         talon8.setP(.1);//yep
         talon8.setI(.00036);
         talon8.setIZone(4000);
         talon8.setD(0);//all up done
      
         //------------speedmode for rollervator----------//
         
         talon2.changeControlMode(TalonControlMode.Speed);
         talon2.enableBrakeMode(false);
         talon7.enableBrakeMode(false);
         
         talon2.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
         talon2.reverseOutput(false);
         talon2.reverseSensor(true);
         
         talon7.changeControlMode(TalonControlMode.Follower);
         talon7.set(talon2.getDeviceID());
         talon7.reverseOutput(true);
        // talon7.reverseSensor(true);  There is no sensor, doing this for continuity
         
         talon2.configNominalOutputVoltage(+0.0f, -0.0f);
         talon2.configPeakOutputVoltage(+12.0f, -12.0f);
         talon7.configPeakOutputVoltage(+12.0f, -12.0f);
         
         talon2.setProfile(0);
         talon2.setF(.10);
         talon2.setP(0.06);
         talon2.setI(0);
         talon2.setIZone(0);
         
         
         
    
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        
    	setDefaultCommand(new CompressorRun());
    	//setDefaultCommand(new PIDVelocityElevatorStop());
   
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void motor1GoForword(double speed){
    	talon1.set(speed);
    }
    public void motor1Stop(){
    	talon1.set(0);
    }
    public void motor1GoBackward(double speed){
    	talon1.set(-speed);
    }
    public void motor2GoForword(double speed){
    	talon2.set(speed);
    }
    public void motor2Stop(){
    	talon2.set(0);
    }
    public void motor2GoBackward(double speed){
    	talon2.set(-speed);
    }
    
    public void CompressorRun(){
    	compressor.setClosedLoopControl(true);
    }
    
    //----------shooter----------//
    public void motor89GoToSpeed(double speed){
    	talon8.set(speed);   //talon 9 is setup as follower so we don't need it here-Joshua 1/19/17
    }	

    public void motor72GoToSpeed(double speed){
    	talon2.changeControlMode(TalonControlMode.Speed);
    	talon2.set(speed);
    	
    }
    
    public void motor72Stop(double speed){
    	talon2.set(speed);
    }
    
    public int getShooterEncVelocity(){
    	return talon8.getEncVelocity();
    }
    
    public int getElevatorEncVelocity(){
    	return talon2.getEncVelocity();
    }
    
    public void motor72stopinvbusmode(){
    	talon2.changeControlMode(TalonControlMode.PercentVbus);
    	talon2.set(0);
    }
    public boolean shooterIsUpToSpeed(){
    	if(getShooterEncVelocity() > talon8.getSetpoint()){
    		return true;
    	}
    	else
    		return false;
    	
    }
    
}

