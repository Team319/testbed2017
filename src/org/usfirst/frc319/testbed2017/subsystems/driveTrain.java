// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.testbed2017.subsystems;

import org.usfirst.frc319.testbed2017.Robot;
import org.usfirst.frc319.testbed2017.RobotMap;
import org.usfirst.frc319.testbed2017.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFollow3 = RobotMap.drivetrainleftFollow3;
    private final CANTalon leftLead4 = RobotMap.drivetrainleftLead4;
    private final CANTalon rightLead5 = RobotMap.drivetrainrightLead5;
    private final CANTalon rightFollow6 = RobotMap.drivetrainrightFollow6;
    private final DoubleSolenoid drivetrainShifter = RobotMap.drivetrainShifter;
    
    

    private final RobotDrive arcadedrive = RobotMap.drivetrainarcadedrive;
    
    public boolean shift;
    
    StringBuilder _sb = new StringBuilder();
    int _loops = 0;
    
    public driveTrain(){
    	
    	
    	leftLead4.changeControlMode(TalonControlMode.PercentVbus);
    	leftFollow3.changeControlMode(TalonControlMode.Follower);
    	leftFollow3.set(leftLead4.getDeviceID());
    	rightLead5.changeControlMode(TalonControlMode.PercentVbus);
    	rightFollow6.changeControlMode(TalonControlMode.Follower);
    	rightFollow6.set(rightLead5.getDeviceID());
    	
    	
    	rightLead5.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightLead5.configEncoderCodesPerRev(1024);
    	rightLead5.reverseSensor(false);
    	rightLead5.reverseOutput(false);
    	
    	leftLead4.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftLead4.configEncoderCodesPerRev(1024);
    	leftLead4.reverseSensor(true);//note when calling getencoder it doesn't flip the value just for
    	leftLead4.reverseOutput(true);
    	/*
    	rightLead5.configNominalOutputVoltage(+0.0f, -0.0f);
    	rightLead5.configPeakOutputVoltage(+12.0f, -0.0f);
    	rightLead5.setProfile(0);
    	rightLead5.setF(.34);//taken from 2016 Stronghold drivetrain, will be re-tuned
    	rightLead5.setP(0.2);//same
    	rightLead5.setI(0);
    	rightLead5.setD(0);
    	*/
    	   
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	
    setDefaultCommand(new Joystickdrive());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    		//setDefaultCommand(new Joystickdrive());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    
  public void arcadedrive(double moveValue, double rotateValue) {
	  
	  arcadedrive.arcadeDrive(moveValue, rotateValue, true);
  
  }
  
  public int getLeftDrivetrainEncoder(){
	  return -leftLead4.getEncPosition();
  }
  
  public int getRightDrivetrainEncoder(){
	  return rightLead5.getEncPosition();
  }
  
  public void shiftUp(){
	  drivetrainShifter.set(DoubleSolenoid.Value.kForward);
	  
	  shift = false;
  }
  
  public void shiftDown(){
	  drivetrainShifter.set(DoubleSolenoid.Value.kReverse);
	  
	  shift = true;
  }
  
  public void driveTrainPIDTestMode(){
	  SmartDashboard.putInt("motorspeed", rightLead5.getEncVelocity());
  	
  	/* get gamepad axis */
  	double leftYstick = Robot.oi.xBoxController.getRawAxis(1);
  	double motorOutput = rightLead5.getOutputVoltage() / rightLead5.getBusVoltage();
  	/* prepare line to print */
		_sb.append("\tout:");
		_sb.append(motorOutput);
      _sb.append("\tspd:");
      _sb.append(rightLead5.getSpeed() );
      
      if(Robot.oi.xBoxController.getRawButton(1)){
      	/* Speed mode */
      	double targetSpeed = Robot.oi.xBoxController.getRawAxis(1) * 370; /* 1500 RPM in either direction */
      	rightLead5.changeControlMode(TalonControlMode.Speed);
      	rightLead5.set(targetSpeed); /* 1500 RPM in either direction */
      	//_sb.append(_talon.getControlMode() );
      	
      	//System.out.println(_talonFollower.getControlMode() );
      	/* append more signals to print when in speed mode. */
          _sb.append("\terr:");
          _sb.append(rightLead5.getClosedLoopError());
          _sb.append("\ttrg:");
          _sb.append(targetSpeed);
      } 
      else if (Robot.oi.xBoxController.getRawButton(2)){
      	rightLead5.set(-.6);
      	//System.out.println(_talon.getControlMode() );
      	//System.out.println(_talonFollower.getControlMode() );
      	//System.out.println("constant voltage mode");
      }
      
      else {
      	/* Percent voltage mode */
      	//System.out.println(_talon.getControlMode() );
      	//System.out.println(_talonFollower.getControlMode() );
      	rightLead5.changeControlMode(TalonControlMode.PercentVbus);
      	rightLead5.set(leftYstick);
      	//System.out.println("joystick vbus mode");
      }

      if(++_loops >= 10) {
      	_loops = 0;
      	System.out.println(_sb.toString());
      }
      _sb.setLength(0);
  }
  }
    		
    
    
    


